{"version":3,"sources":["components/Header.js","components/SideMenu.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","SideMenu","Main","useState","chartData","setChartData","useEffect","labels","datasets","label","data","backgroundColor","pointBorderColor","borderWidth","lineTension","addDataset","newData","i","push","Math","floor","random","console","log","options","responsive","scales","xAxes","gridLines","color","yAxes","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wKAmBeA,G,MAjBA,WACX,OACI,6BACI,4BAAQC,UAAU,UACd,6BACI,4CACA,4BACI,sCACA,sCACA,4C,OCGTC,EAXE,WACb,OACI,yBAAKD,UAAU,aACX,kBAAC,IAAD,CAAiBA,UAAU,cAC3B,kBAAC,IAAD,CAAiBA,UAAU,SAC3B,kBAAC,IAAD,CAAaA,UAAU,SACvB,kBAAC,IAAD,CAAUA,UAAU,W,gBCiEjBE,EAtEF,WAAO,IAAD,EACmBC,mBAAS,IAD5B,mBACRC,EADQ,KACGC,EADH,KAoBfC,qBAAU,WAjBND,EAAa,CACTE,OAAQ,CAAC,YAAa,UAAW,YAAa,WAAY,SACjD,YAAa,UAAW,YAAa,WAAY,SACjD,YAAa,UAAW,YAAa,WAAY,UAC1DC,SAAU,CACN,CACIC,MAAO,aACPC,KAAM,CAAC,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GACnDC,gBAAiB,CAAC,uBAClBC,iBAAkB,CAAC,0BACnBC,YAAa,EACbC,YAAa,QAQ1B,IAEH,IAAMC,EAAa,WAEf,IADA,IAAIC,EAAU,GACNC,EAAI,EAAGA,GAAK,GAAIA,IACpBD,EAAQE,KAAKC,KAAKC,MAAsB,GAAhBD,KAAKE,WAEjCC,QAAQC,IAAIP,GACZX,EAAa,CACTE,OAAQ,CAAC,YAAa,UAAW,YAAa,WAAY,SACjD,YAAa,UAAW,YAAa,WAAY,SACjD,YAAa,UAAW,YAAa,WAAY,SACjD,YAAa,UAAW,YAAa,WAAY,SACjD,YAAa,UAAW,YAAa,WAAY,UAC1DC,SAAU,CACN,CACIC,MAAO,aACPC,KAAMM,EACNL,gBAAiB,CAAC,uBAClBC,iBAAkB,CAAC,0BACnBC,YAAa,EACbC,YAAa,OAQ7B,OACI,yBAAKd,UAAU,yBACX,yBAAKA,UAAU,eACX,kBAAC,IAAD,CAAMU,KAAMN,EAAWoB,QAAS,CAC5BC,YAAY,EACZC,OAAQ,CACJC,MAAO,CAAC,CAACC,UAAW,CAACC,MAAO,2BAC5BC,MAAO,CAAC,CAACF,UAAW,CAACC,MAAO,+BAGxC,yBAAK7B,UAAU,aACP,kBAAC,IAAD,CAAqB+B,QAAS,kBAAMhB,KAAcf,UAAU,QAC5D,kBAAC,IAAD,CAAsB+B,QAAS,kBAAMhB,KAAcf,UAAU,YCnDlEgC,MAZf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,cACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCEYiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.d7df9b46.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n    return (\n        <div>\n            <header className=\"header\">\n                <nav>\n                    <h1>Algo Trading</h1>\n                    <ul>\n                        <li>title1</li>\n                        <li>title2</li>\n                        <li>title3</li>\n                    </ul>\n                </nav>\n            </header>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react'\nimport {MdAccountCircle, MdChangeHistory, MdDateRange, MdDelete} from \"react-icons/md\";\n\nconst SideMenu = () => {\n    return (\n        <div className=\"side-menu\">\n            <MdAccountCircle className=\"icon-user\"/>\n            <MdChangeHistory className=\"icon\"/>\n            <MdDateRange className=\"icon\"/>\n            <MdDelete className=\"icon\"/>\n        </div>\n    )\n}\n\nexport default SideMenu;\n","import React, {useState, useEffect} from 'react'\nimport {Line} from 'react-chartjs-2';\nimport {MdKeyboardArrowLeft, MdKeyboardArrowRight} from 'react-icons/md'\n\nconst Main = () => {\n    const [chartData, setChartData] = useState({});\n    const chart = () => {\n        setChartData({\n            labels: ['Monday(1)', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',\n                     'Monday(2)', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',\n                     'Monday(3)', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n            datasets: [\n                {\n                    label: 'algo trade',\n                    data: [0,80,45,55,12,76,90,24,14,56,23,43,33,56,23,1],\n                    backgroundColor: ['rgba(255,255,0,0.6)'],\n                    pointBorderColor: ['rgba(255,255,255, 0.6)'],\n                    borderWidth: 4,\n                    lineTension: 0,\n                },\n            ]\n        })\n    }\n\n    useEffect(()=> {\n        chart();\n    }, [])\n\n    const addDataset = () => {\n        let newData = []\n        for(let i = 0; i <= 24; i++){\n            newData.push(Math.floor(Math.random() * 80))\n        }\n        console.log(newData)\n        setChartData({\n            labels: ['Monday(1)', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',\n                     'Monday(2)', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',\n                     'Monday(3)', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',\n                     'Monday(4)', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',\n                     'Monday(5)', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],\n            datasets: [\n                {\n                    label: 'algo trade',\n                    data: newData,\n                    backgroundColor: ['rgba(255,255,0,0.6)'],\n                    pointBorderColor: ['rgba(255,255,255, 0.6)'],\n                    borderWidth: 4,\n                    lineTension: 0,\n                },\n            ]\n        })\n    }\n    const removeDataset = () => {\n       chartData.datasets.pop()\n    }\n    return (\n        <div className=\"trade-chart-container\">\n            <div className=\"trade-chart\">\n                <Line data={chartData} options={{\n                    responsive: true,\n                    scales: {\n                        xAxes: [{gridLines: {color: \"rgba(255,255,255,0.3)\"}}],\n                        yAxes: [{gridLines: {color: \"rgba(255,255,255,0.3)\"}}]\n                    },\n                }} />\n            <div className=\"btn-group\">\n                    <MdKeyboardArrowLeft onClick={() => addDataset()} className=\"btn\"/>\n                    <MdKeyboardArrowRight onClick={() => addDataset()} className=\"btn\"/>\n            </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Main;\n","import React from 'react';\nimport Header from './components/Header';\nimport SideMenu from './components/SideMenu';\nimport Main from './components/Main';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SideMenu />\n      <div className=\"right-main\">\n        <Header />\n        <Main/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}